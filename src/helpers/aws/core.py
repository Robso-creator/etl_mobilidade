import boto3

from src import settings
from src.helpers.logger import SetupLogger

_log = SetupLogger('etl_mobilidade.src.helpers.aws.core')


class AWS:
    def __init__(self, service_name, access_id=None, secret_id=None):
        self.simulate = settings.SIMULATE
        self.client = None

        dict_params = {
            'service_name': service_name,
            'region_name': settings.AWS_REGION,
            'aws_access_key_id': access_id or settings.MINIO_ROOT_USER,
            'aws_secret_access_key': secret_id or settings.MINIO_ROOT_PASSWORD,
        }

        if self.simulate:
            _log.info('S3 | going with minio')
            dict_params['endpoint_url'] = settings.AWS_ENDPOINT_URL_MINIO

        _log.info('getting all allowed_clients and allowed_resources')
        session = boto3.Session()
        allowed_clients = session.get_available_services()
        allowed_resources = session.get_available_resources()
        _log.info('got all allowed_clients and allowed_resources')

        _log.info(f"creating client for '{service_name}'...")
        if service_name not in allowed_clients:
            _log.info(f"service_name '{service_name}' not allowed to create 'client' object... client not created.")
            self.client = None
        else:
            # Clients provide a low-level interface to the AWS service.
            # Their definitions are generated by a JSON service description present in the botocore library.
            # The botocore package is shared between boto3 as well as the AWS CLI.
            self.client = boto3.client(**dict_params)
            _log.info(f"client for '{service_name}' created!")

        _log.info(f"creating resource for '{service_name}'...")
        if service_name not in allowed_resources:
            _log.info(
                f"service_name '{service_name}' not allowed to create 'resource' object... resource not created..",
            )
            self.resource = None
        else:
            # Resources are a higher-level abstraction compared to clients.
            # They are generated from a JSON resource description that is present in the boto library itself.
            self.resource = boto3.resource(**dict_params)
            _log.info(f"resource for '{service_name}' created!")
